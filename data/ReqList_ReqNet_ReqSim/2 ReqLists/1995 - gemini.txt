2.5.8.2	Also, from a human engineering perspective, user interfaces for different access levels should be uniform across all subsystems, though different access levels should present different `look-and-feels'.
2.5.9.0.1	Unless the contrary is explicitly stated, all requirements and modes presented are intended to be available to all users of the system.
2.5.9.0.2	It should also be noted that what the system has to guarantee in terms of operations must fulfill all possible requirements, but it does not mean that all features will be made available to all users at all locations at all times.
2.5.9.0.3	The available capabilities will have to be adapted to the operational needs both locally and remotely and these decisions can only be taken later in the life of the project.
2.5.9.1.1	To allow observing astronomers to achieve this objective, the system must offer to a user an interface which, while fulfilling the various operational requirements in the different modes and offering status information both automatically and on request at any required level, is still simple to learn and secure in its use.
2.5.9.1.2	Observing astronomers shall have no privileges as far as the direct control of the telescope is concerned. They shall not be able to send control commands directly but they must be able to enquire about the status of the telescope or any subsystem at any time. The intent is not to restrict the capabilities of the observing astronomer in any way but rather to establish a single point of control and responsibility. Programs, as opposed to observers, may have the capability of direct control of the telescope. This would allow the observer to create an observing program which requested a telescope control function but would not allow the observer to enter (for instance) a command to slew the mount. Astronomers are typically given control access to instruments, however.
2.5.9.1.3	Traditional interactive operation shall normally be replaced by operation via an automatic sequencer. This is essential to support operational requirements such as service observing and flexible scheduling (as defined later in Section 2.7 on page 2-12).
2.5.9.1.4	A certain degree of interaction shall be provided, meaning in this case that the user will interact with the scheduler program, rather than with the control programs directly.
2.5.9.1.5	Observing commands will normally be submitted via the User interface to a queue for later execution. It must also be possible to break and resequence this queue. e.g. as a result of the quality assessment of previous data.
2.5.9.1.6	In particular, Operations staff will be able to enable direct interactive operation, but this shall not be considered as the normal operation mode for the reasons explained in Section2.7 on page 2-12. It is evident that, for some functions (such as adjustment of spectrograph slit width for seeing conditions) it must be necessary to include interactive capability. However each instance of such a function should be examined as a candidate for automation - such as focusing.
2.5.9.1.7	The existence of the scheduling queue shall be transparent to the on-site observer during the initial phases of telescope operation. Only after experience has been gained with the system will the existence of the queue become evident to the onsite observer.
2.5.9.2.1	Operations staff will control the Gemini 8m Telescopes indirectly via a scheduler program or directly via commands. They will supervise telescope operation and will be able to advise observing astronomers on what they have to do to use telescope and instruments efficiently. They shall also monitor general performance and system safety.
2.5.9.2.2	Operations staff shall have privileges to access all commands and maintenance procedures in case of problems. This includes direct control of physical units. However, they shall not have access to subsystems while these are in normal operation. If they need to access other parts of the system appropriate reconfiguration procedures have to be run.
2.5.9.2.3	Operations staff shall have access to operation tables in update mode, while observing astronomers will have access to them only in read mode (for example the list of filters mounted on an instrument). Again, the intent is not to restrict the capabilities of the observing astronomer in any way but rather to establish a single point of control and responsibility. At the present time it is not clear how to handle visitor instrument requirements in this area.
2.5.9.2.4	They shall be able to change the operational status of units according to the results of tests performed on such units (e.g. to see if a faulty unit can be declared as operational again and redefined as part of the environment in use).
2.6.4.1	The requirements to have instruments operated as single units imply that several user stations will be active at the same time on the Gemini 8m Telescopes. On these user stations, different kinds of users may be working at the same time with the Gemini 8m Telescopes software.
2.6.4.2	Independently of the location of users at the telescope site, they shall be able to access (according to their privileges) any part of the whole setup with a simple logon and configuration operation. In other words. any subsection of the whole Gemini 8m Telescopes system should be accessible and controllable from any single point (but of course with protection ensuring security and safety).
2.6.4.3	Monitoring shall exist both in the form of automatic displays of status information at different locations, and in the form of explicit access to the required status information from any point.
2.6.4.4	Monitoring shall not affect the performance of ongoing observations.
2.7.1.2	Interactive operation is supported, but always through the Observatory Control System (OCS).
2.7.1.3	It is possible to have more than one station participate in the observing.
2.7.1.4	Interactive observing with time allocation for full nights is a first basic requirement of the Gemini 8m Telescopes. It is therefore an essential requirement that telescope operation is supported by the software in a smooth and very friendly way in this mode.
2.7.1.5	Interaction will normally be via an automatic sequencer (see Section 2.5.9 on page 2-6). This is clearly a top priority requirement and one which will have to be realized before implementing any other mode. The initial implementation of the automatic sequencer will operate in a pass through mode where all commands are accepted and transmitted with minimal checking and delay.
2.7.2.1	The observing program must be fully automated, requiring very little human interaction during the observation. The means that the Gemini software must include a sufficiently rich programming environment to make this feasible. In addition, this should be a visually-oriented environment providing a simple, easy-to-use interface to the astronomer.
2.7.2.2	There should be a full telescope simulator to enable the astronomer to test observing programs for completeness, errors, and functionality. This simulator should function within the virtual telescope environment of the Gemini system.
2.7.2.3	All control software must provide support for simulated use within the virtual telescope.
2.7.2.4	There is a requirement for software to assist in object selection both within an observing program and across observing programs, in order to optimize observing efficiency. This software must consider target positions, weather conditions, and instrument configurations.
2.7.2.5	There must be software to support the flexible scheduling, both manually and via a scheduler, allowing for the interleaving of observing programs in a manner that is transparent to the individual observing programs. This includes managing the collection of science, environmental, engineering, reference, and calibration data.
2.7.2.6	To maximize the use of the available observing time it must be possible to queue all of the observing that is possible with the currently available instruments. These would be in the form of preprogrammed observing sequences. It should be possible to resort the queue so that the next observation to take place comes to the front of the queue. This sorting will be based on properties of the individual observing sequences, current site conditions, and other rules established by the observatory directorate.
2.7.3.0.1	All software should be developed to permit remote operations. There should be no conceptual difference between software working on-site and remotely.
2.7.3.0.2	All observing facilities should work both on-site and of f-site. It should be possible to do full operations remotely.
2.7.3.0.3	Team observing, with multiple observers at different sites should be supported.
2.7.3.0.4	It must be possible to restrict specific operations to specific remote sites. For example, at the Mauna Kea site, remote telescope control might be restricted to Hale Pohaku. The method used to restrict such operations should be independent of the operations themselves, and dynamic.
2.7.3.0.5	Despite the obvious limitations introduced by the link bandwidths available at the different locations, the system shall be totally transparent to local or remote use.   It is only necessary that the functionality of the system be transparent, it is accepted that the speed of the link will determine the perceived transparency of the system. However the system design should minimize the impact of link bandwidth on transparency.
2.7.3.0.6	Security of operation shall be considered and might imply different operation levels and privileges at different sites.
2.7.3.2.1	Remote observing means that users shall be able to observe from a remote site such as Cerro Tololo, Hilo or even home Institutes. This possibility has to be provided on the Gemini 8m Telescopes.
2.7.3.2.2	Remote users shall normally interact with the system via ·operators at the Gemini 8m Telescopes control facility ·operators at the Gemini 8m Telescopes site facility ·operators at the Gemini 8m Telescopes base facility ·operators at the Gemini 8m Telescopes remote operations facility ·via the scheduler program and shall not control any part of the Gemini 8m Telescopes directly.
2.7.4.1	The observing program must be automated, requiring little human interaction during the observation. The means that the Gemini software must include a sufficiently rich programming environment to make this feasible. In addition, this should be a visually-oriented environment providing a simple, easy-to-use interface to the astronomer.
2.7.4.2	This programming environment should be available both to the astronomer, for developing the program, and to the observer, for review and adjustment of the program. This access may or may not be done concurrently on a shared environment.
2.7.4.3	The programming environment should allow for the communication of special notes, instructions, and comments from the astronomer to the observer, possibly involving multi-media techniques. The use of this feature would, however, be discouraged for queue-based observing.
2.8.1.1	To achieve efficient service observing, queue observing, and flexible scheduling, it should be possible to carry out observations automatically, in accordance with predefined sequences of exposures, as is commonly done in space observatories.
2.9.1.1	The syntax of control flow commands is to be consistent across the system, whether accessing workstation software or IOC software. See Section 3.2.5 on page 3-6.
2.9.1.2	All subsystems must respond to a common set of commands to test operational status, inquiries as to version, perform self-tests, etc. These common commands are described in Section5.3 on page 5-2.
2.9.1.2.1	All IOC subsystems must respond to additional common commands for such activities as start, stop, initialize, reset parameters, etc. These IOC common commands are described in Section 5.3 on page 5-2.
2.9.1.3	The support structure for communicating commands must be reliable, with a uniform ACK/NAK protocol adopted across all systems. Timeouts must be supported at approximately500 msec.
2.9.1.4	Handshaking of commands between IOCs must occur within 100-200 msec, signaling acceptance of each command.
2.9.1.5	For commands allowing delayed replies, timeouts for that reply must also be supported.
2.9.1.6	Peak control information within the system is expected to be 100 TPS. This assumes bridging between communication sections, to isolate traffic in relevant sections only.
2.9.2.1.1.1	Data from detectors must be stored in the most effective method permitted by available technology. Astronomical data is often detector readout limited so that disk access and data transfer times are not significant. Maximum acceptable readout time for detector data is very dependent on detector type and size as well as the intended application:
2.9.2.1.1.2	For focusing and related activities, maximum acceptable detector readout time is about0.1 sec, though only a portion of the detector may be read during that time.
2.9.2.1.1.3	For mosaicked, large optical detectors, a full readout of the detector must be done in about 2 or 3 minutes.
2.9.2.1.2.1	Since the Gemini system supports monitoring of operation, there must be the capability of providing multiple, simultaneous access to data. Data transfer between the virtual telescope system and attached workstations therefore imposes significant transfer requirements on the LAN. The LAN must support a transfer rate of 20-40 Mbits/second.
2.9.3.1	The system must allow for fast transmission of rough images every 0.5 sec. This may be assisted through the use of data-loss compression techniques (e.g. JPEG, MPEG, etc.).
2.9.3.2	In addition, there is the need for transmission of images matching the original resolution. This high-quality transmission must require less than 20 sec, and can only be assisted with loss-less compression.
2.10.1	To preserve the integrity of the system, there must be a system of privileges established at each operating level of the system. These privileges should be determined in a simple manner during logging into the system.
2.10.2	Finally, procedures must be implemented for convenience and system integrity , to simplify and codify common tasks. The tasks that require such procedures include: · Telescope start-up and shutdown. · Telescope system self-testing. · Instrument start-up and shut-down. This is not permitted to interfere with telescope operation. · Instrument self-testing and self-diagnosis. This is not permitted to interfere with telescope operation.
2.11.1.1	The Gemini software should have no hard restrictions on the number of simultaneous users, but should allow for policy decisions that do restrict the amount of simultaneous access. The response time requirements vary with the function. The appropriate limits are:
2.11.2.1	Every command must be accepted/rejected within 2 sec and before the corresponding action occurs. (This is different than the ACK/NAK response of the communications protocol - here, the target system must have examined the command and verified its validity.
2.11.2.2	Status display update must be within 4 sec at the local stations (certain functions, such as telescope position, may have tighter constraints). Remote station update response is given in the Requirements for Remote Operations section.
2.11.2.3	Requests of subsystems for status information must be answered within 5 sec and be possible in maintenance level operation.
2.11.3.1	All software bugs should be logged and then fixed as soon as possible after detection. The goal is to have restart conditions occur only on hardware failure.
2.11.3.2	Fault recovery, exception handling, fail-safe checks, etc. should be used to improve reliability.
2.12.1	The telescope and instrument software shall contain built-in test (BIT) facilities to verify Gemini 8m Telescopes system and Gemini 8m Telescopes software performances.
2.12.2	Every Gemini 8m Telescopes software module shall have corresponding test specifications to check normal operation of releases, to be used both for acceptance tests and as an on-line test procedure.
2.12.3	The Gemini 8m Telescopes control software shall also provide for execution of self-test sequences of the Gemini 8m Telescopes system and subsystems. These shall automatically exercise all subsystems present in a given operational configuration.
2.12.4	Regression tests should be a part of every Gemini 8m Telescopes software package.
2.13.1.1	Subsystems must notify the user when faults occur. This notification must be specific as to origin and problem. The notification must also be capable of being electronically logged. It may also prove useful to have multiple levels of fault notification such as detailed, verbose, short, etc. to aid in tracking down problems.
2.13.2.1	Should a subsystem fail (e.g. one detector, one instrument) predefined procedures must exist to redefine the environment in such a way that operation can restart with the remaining equipment.
2.13.2.2	In case of computer hardware failure concerning the user station equipment, it shall be possible to transfer control from one user station to another via a simple software reconfiguration procedure.
2.13.2.3	In the case of IOC failure, no transfer of control to another IOC will be possible, due to the local connections and interfaces to the control electronics. In this case there shall be a procedure to replace faulty cards and/or assemblies. If it is possible to observe with that particular IOC in a failed state (in general, this is limited to IOCs that are associated with individual scientific instruments) then it must be possible to reconfigure the system to do so.
2.13.3.1	All communication shall be based on the use of standard communication protocols, where retry procedures are applied (a form of software redundancy) as part of the protocol.
2.14.1.1	There should be no restrictions imposed by the software on users. Only policy decisions (permissions, access privileges, etc.) should prevent any user from accessing any part of the Gemini system from any local or remote station.
2.14.1.2	Similar functionality should be presented to the users using similar user interfaces. However, user interfaces should clearly reflect access modes and operating levels.
2.14.3.4	Gemini software developers should maintain accurate change logs showing software modifications as they are applied to the system software.
2.14.3.5	Gemini software developers should adhere to a standard method for the reporting and recording of errors from both internal and external sources.
2.14.3.6	Gemini software should be developed in evolutionary fashion, using the CVS version control system.
2.14.3.7	All Gemini subsystem packages should include as part of the software both a simulator module for inclusion in the virtual telescope (see Design constraints, below), and user interface modules for the user interface environments that the subsystem will be operating in. The interfaces required of these user interface modules are described in Section 3.3 on page 3-6.
2.14.3.8	All Gemini software is to be fully documented, internally with appropriate comments, and external documentation. External documentation must include Unix-style man pages.
2.14.3.9	All Gemini subsystem packages must provide modules for the testing and diagnosis of the subsystem.
2.14.3.10	All instrumentation control software must provide full access  to all instrument functionality. It is likely that different user interface modules (see above) would present different portions of this functionality to the user. The information required of each interface module is found in the Functional Requirements specifications for each instrument.
2.14.3.11	All Gemini software must be version labeled, both in source and binary form. The version information is to be retrievable from executing software via control commands.
2.14.4.3	Gemini subsystem should be as self-contained and autonomous as possible, thereby decreasing the functional width of the interface to the rest of the Gemini system.
2.14.4.4	No subsystem package should make any assumptions about the surrounding environment beyond that provided in the interface specifications.
3.1.1.1	Control information must be transferred, typically in the form of commands and replies from users, to telescope and instruments. Replies might contain status information and, in general, data concerning instruments and telescopes, to be stored together with the astronomical data.
3.1.1.2	Control information on all controlled variables must be provided by all subsystems on request. No request for information shall produce a delay of control activities or locking, even if the corresponding equipment is not available or faulty.
3.1.1.3	Delay times for the exchange of control information must stay within precise time limits to be defined in ªGeneral Descriptionº in Chapter 2. One can afford to retransmit commands in case of transmission error or collision, but the protocol has to be predictable in that commands cannot get lost and replies have to come back reliably.
3.1.2.1.1	Detector data must be acquired and stored in the most effective way technology will allow; effectiveness should be evaluated in terms of cost, space requirements, longevity, and speed. This shall lead to the definition of a Gemini 8m Telescopes standard, used on all instruments. In general, operational overheads must be kept as low as possible, to maximize actual observing times.
3.1.2.1.2	Intermediate storage of raw data in memory on different nodes and in different formats should be kept to a minimum. However, there must be at least two copies - one to secure data as acquired and one to do assessment of data quality on-line (this last copy preferably on removable media).
3.1.2.1.3	The link chosen to transfer data should represent as small a bottleneck as possible for data acquisition.
3.2.1.3.2	It shall be possible to update all non-protected parameter values, i.e. those not used by operations at observing level.
3.2.2.2	Protections must also be enforced (see also Security in Section 3.5.6 on page 3- 20) among users and the operational software should indicate clearly to users the current operation level and check the compatibility between subsystems in different modes.
3.2.3.2	Each node will have the capability to run at all operation levels.
3.2.3.5	In addition, the system must support off-site observing modes. The system will provide for a single off-site data acquisition and instrument control node - to be located at either the Gemini 8m Telescopes Site Support or Base Facility.
3.2.3.7	As a conclusion, the Gemini 8m Telescopes control software shall allow simultaneous operation of up to six active control nodes and up to two more monitoring nodes (one local and one remote) without appreciable degradation of performance.
3.2.5.1	There must be automatic procedures to implement startup and shutdown of the telescope and instruments. These must allow startup and shutdown of instruments independently of the telescope and without affecting the telescope operation.
3.2.5.2	Reconfiguration procedures must exist, to change the observing environment.
3.2.5.3	The definition of the observing environments must be dynamic, i.e. feasible during operations without the need to restart everything. The same applies to the related light path.
3.2.5.5	The operational software should know which subsystems are installed and operational at any given time.
3.3.1.2	The user interface should not be seen as a package linked to a specific computer. Given the requirement to be able to access the Gemini 8m Telescopes from several points, the user interface should rather be seen as a package to be callable from a large number of stations, depending on where a user is. It should also be network transparent so that it does not matter where it is being run.
3.3.1.3	The user interface tools shall be based on standards, defined in Section 4.2.5 on page 4- 7, which will be portable across different computer hardware platforms (Portable User Interface Toolkit). The intent of a portability requirement is to facilitate migrating existing and future Gemini systems to different hardware as the need arises. It is the current intent to limit the selection of computer hardware platforms to as few as is practical.
3.3.2.1	The standard software must be adequate for the real-time requirements and must offer drivers to the standard electronics to be used on all the Gemini 8m Telescopes software subsystems and instruments.
3.3.2.2	Links between electronics interfaces and main processors must meet the requirements imposed by the data specifications (see Section 3.1 on page 3- 1).
3.3.3.0.1	The Gemini 8m Telescopes software must interface to the external software and clearly the interfaces are fully part of the Gemini 8m Telescopes software.
3.3.3.1.1	It shall be possible to monitor the quality (image quality, spectral resolution, signal to noise, etc.) of the astronomical data as it comes in.
3.3.3.1.2	Standard reduction procedures should be available for basic on-line calibrations of the observed data. Ultimately, one would like to have fully reduced and calibrated data at the end of the observations. Advanced pipeline procedures might make this feasible, at least for observations of a standard nature. The above statements define the goal of quick-look analysis for the Gemini 8m Telescopes.
3.3.3.1.3	Quick-look data processing should be provided on the Gemini 8m Telescopes, with procedures suitable for fast on-line data preprocessing. A prerequisite for this is that acquired data are made available as directly as possible in a common format, and that all additional data related to an exposure and logging information are made available on-line at the same time.
3.3.3.1.4	Quick-look should be usable within exposure sequences to provide results and feedback parameters to the control software in a programmed way, without the need for manual intervention. This document does not try to be specific about the requirements for Quick-look other than that it should be synchronous.
3.3.3.1.5	Near-line processing should be available for simple data reductions required for data integrity validation (i.e. remove instrument and observatory effects so the observer can make decisions about further observing actions). This data reduction proceeds sequentially through requests, but asynchronously from data acquisition. In particular, data acquisition takes precedence over near -line data reduction.
3.3.3.1.6	Off-line pixel processing for full data reduction should also exist at the Gemini 8m Telescopes site, but does not have any interface to the Gemini 8m Telescopes software. The Astronomical communities have made considerable investments in image processing software, and therefore, compatibility with and adaptations to these packages must be sought.
3.3.3.2.1	The output format of the Gemini 8m Telescopes data must be compatible with the GEMINI archive requirements.
3.3.3.3.1	The Gemini 8m Telescopes software must be able to interface with all commercial software packages available on the Gemini 8m Telescopes and integrated into the Gemini 8m Telescopes operation.
3.3.4.1.1	The LAN shall support the majority of the Gemini 8m Telescopes system internal communication needs. This LAN must be capable of dealing both with the data bandwidths required (at peak and on average) and with the required response times and synchronization needs. This LAN shall be supplemented with a Local Time Bus, for distribution of absolute and relative time signals, and both a digital reflective memory bus and an analog event-based bus, for distribution of signals with requirements not satisfied by a LAN.
3.3.4.1.2	To eliminate conceptual access problems, while coping with different bandwidths, LAN and WAN interfaces shall be homogeneous and shall be based on standards which allow migration on different media, should they become required during the Gemini 8m Telescopes project life.
3.3.4.1.3	For maintenance reasons and hardware independence, a clear hierarchical model must be implemented, supporting separation of logical and physical layers, e.g. ISO/OSI model. It is recognized that this hierarchy may need to be violated for (in general) performance reasons. This results in point-to-point connections between peer systems or direct connections bypassing the hierarchy.
3.3.4.1.4	Network redundancy should also be considered in the design phase as a way to increase reliability and security, in particular for control information.
3.3.4.1.5	Due to the uncertain future of the Internet, only non-essential tasks may employ it. All essential tasks, not including remote observing, must take place on resources controlled by the project (such as leased lines).
3.3.4.1.6	Violation of the hierarchical nature of the system can lead to testing and maintenance problems. The use of these features must be limited and constrained by the following guidelines: 1. Peer-to-peer connectivity should only be used to overcome a demonstrated performance problem. 2. Bypassing the hierarchy (connected between grandmother and granddaughter with no path through the mother) should only be used for transmission of status information or bulk data, not control flow.
3.4.2.1	Computers used at the Gemini 8m Telescopes site, particularly in the test phase when they are outside the control room and near the subsystem under test, shall be checked against altitude and humidity specifications for the Gemini 8m Telescopes site (see also [EDS] in Section 1.3).
3.4.2.2	Computer hardware must be able to run the Gemini 8m Telescopes software environment (operating systems, Gemini 8m Telescopes software) and provide compatibility in data format (identical internal data representation).
3.4.2.3	Common development and implementation tools must be both available and supported
3.4.2.4	Identical network access must be supported
3.4.2.5	Local processing power must be such that telescope and instrument control does not represent a significant overhead in the whole process of executing an observing program (the overhead, if any, should be limited by the time it takes for physical devices to act)
3.4.2.6	The choice of a scalable hardware architecture with computers at various performance levels should solve the problem of adequate on-line data assessment, as the amount of this activity is very variable and dependent upon the kind of detector and method used.
3.4.2.7	Due to the limited bandwidths which may be available remotely, there will be constraints on the functionality of remote operations and access.
3.4.3.1	Individual instruments must be able to run fully independently.
3.4.3.2	Telescope software at the two telescopes must be maintained to be identical in the upper layers (even if hardware should differ).
3.4.3.3	Additions of new instruments should aim, as a goal, at introducing no modification to already operational parts. Modifications should be confined to the operational procedures and should not affect the bulk of the existing software.
3.4.3.4	Switching to different configurations must be possible at any time with appropriate procedures.
3.4.3.5	There must be easy procedures to reconfigure the system when subsystems are modified or removed.
3.4.3.6	The number of main packages of software must be kept to a minimum to facilitate maintenance, but compatibly with the need to have the right degree of modularity.
3.4.3.7	Commercial and public domain packages should be used whenever possible.
3.4.3.8	Existing software packages should be reused wherever possible.
3.4.3.9	Existing software expertise should be consulted whenever possible.
3.4.3.10	All software which does not directly control specific hardware must be written as machine independent, portable code. Even for microprocessor software, the software should be hardware independent, to allow a later choice of the target microprocessors.
3.4.3.11	To allow for expansion and maintenance, Gemini 8m Telescopes standards must be defined for the on-line software and the development environment.
3.4.3.12	On-line version control must be implemented. That is, the version control system must be available to recover/restore versions at all times.
3.4.3.13	At boot time, the Gemini 8m Telescopes software shall check the consistency of versions of all the various software components.
3.4.3.14	Table-driven software should be used whenever possible, to avoid unnecessary compilations.
3.4.3.15	Changing system constants, such as arcseconds/bit for an encoder, shall not require recompiling but will be updated as part of system startup, and, for some constants, will be modifiable during operation. System status parameters will be maintained to an extent that will allow restarting the system and regaining the previous state. The extent of duplication of the previous state will be dictated by safety and practical considerations.
3.4.3.16	Strict checking should be applied on this to preserve maintainability and reconfiguration of the system.
3.5.3.1.1	To guarantee maximum availability of the control system, retry procedures must be embodied in the software in case of error or failure (e.g. time-out, hardware failure) to achieve recovery on-line whenever possible.
3.5.3.1.2	Should recovery also fail, the error or failure has to be reported in a clear form (to identify the cause of the problem) and the system shall put itself into a safe state, whenever a safety aspect might be involved.
3.5.3.1.3	To avoid unnecessary downtime, it must be possible for the system to reconfigure itself in order to continue observing, in a different mode if required, given the failure of a single non-critical subsystem.
3.5.3.1.4	To increase software robustness, range checking and validity checking shall be supported before execution of any input command. This must be possible ahead of time, preparing observing sequences for automatic observations and simulating observations to estimate results.
3.5.3.1.5	On-line pre-checking of the operational status of equipment should be done prior to sending critical or time consuming commands. It must be possible to apply continuous monitoring to all subsystems on request, both when in operation and when idle, to check their operational status.
3.5.3.1.6	A measure of fault rates should be done during commissioning to establish baseline rates for system reliability monitoring.
3.5.3.1.7	The system should be constantly monitoring active subsystems to be sure they are operating correctly before sending command to each subsystem. This monitoring should continue on inactive subsystems.
3.5.4.1.1	All subsystem software is to include modules to aid in the maintenance and testing of the subsystem. For example, each subsystem is to include a simulator that provides a reference behavior for that subsystem. Simple mechanisms should exist for replacing a subsystem with its simulation.
3.5.4.1.2	Each subsystem should have a background task running whenever that subsystem is operational, performing such tasks as checking power supply levels, temperatures, performance, correct responses to commands. The OCS is to be notified of any detected problems.
3.5.4.1.3	Each subsystem should provide a module for fully exercising all sub-system components, both hardware and software. This module is executed automatically during start-up and on demand through the defined interface. Problems are to be automatically reported to the OCS via the defined interface.
3.5.4.1.4	There are also software modules for testing the subsystem as an integrated portion of the entire system. This software would be executed on demand during maintenance operation level.
3.5.4.6.1	All equipment shall support a programmed adjustment and maintenance interval of 30 days or longer.
3.5.5.1	All Gemini Software must be designed with human engineering requirements under consideration. The human engineering requirements for Gemini Software include: A. provisions for minimizing stress effects and fatigue; B. feedback on operation on specific tasks; C. people and machine interfaces; D. procedures; E. training and experience; F. interaction with team members; G. management and organizational behavior
3.5.6.2.1	The Gemini system must be self-monitoring to invoke safety monitoring to prevent risk to people or damage to equipment. The software should be able to quickly bring the Gemini system to a safe state upon notification of such danger. Subsystems must be able to detect such danger and report it appropriately. In the event that the risk persists, subsystems must be able to move themselves into safe states to protect people and equipment (i.e. if there is a failure in the higher -level systems).
3.5.6.2.2	Safety protection must be applied whenever there is the risk that the actions of the control software could endanger people or cause damage to any Gemini 8m Telescopes sub-system, for example, by driving beyond limits or by overexposing detectors. This protection, where implemented, must be independent of the software. In general, this will require mechanical hard stops, electrical interlocks, electrical hard limit switches, soft limit switches, software limits, and watch dogs.
3.5.6.2.3	The order in which these systems will work is as follows: 1.software limits - the software will not allow unsafe actions; the command will be rejected 2.soft limit switches - the software will detect unsafe areas and halt; the software will allow movement off of soft limits 3.software watch dogs - the software will halt if its watch dog has not been reset 4.hardware watch dogs - the system will halt if its watch dog has not been reset 5.hard limit switches - these switches will remove power from actuator when beyond soft limits; the software/electrical systems will allow movement off of hard limits 6.hardware interlocks - these will prevent both software and hardware from action - there will be no bypass of these systems 7.hard stops - the mechanism cannot move beyond this point due to mechanical limit(s). In general hard stops will use dampers to avoid damage to equipment.
3.5.6.2.4	The Gemini 8m Telescopes software shall be able to bring the Gemini 8m Telescopes system quickly to a safe state upon detection of danger. Safety aspects shall be analyzed during the functional specification phase of the software.
3.5.6.2.5	Security must be provided in order to both prevent accidental mix-up of commands from different users on different parts of the system and to prevent intrusion from the wide area network into the Gemini 8m Telescopes. In particular, the astronomical database must be protected from intrusion, whether the purpose is to access private data or to be destructive. It is acceptable, and may well prove to be the best solution, to provide intrusion security by a well designed network gateway acting as a firewall.
3.5.6.2.6	A system that is operating in Engineering/Maintenance mode must ignore directives from other systems, though status information should still be provided for use by other systems.
3.5.6.2.7	There should be security preventing the intrusion into the system by unauthorized users, or users at unauthorized access levels.
3.5.6.2.8	All systems are appropriately interlocked. This interlock must not depend on any software for reliable operation. Details of the interlock system are found in the Mount Control System Work Package Definition.
3.5.6.2.9.1	All hazards capable of causing death and/or loss of irreplaceable equipment shall be passively interlocked.
3.5.6.2.9.2	All hazards capable of causing injury and/or severe damage to equipment shall be actively interlocked (severe damage implies that repairs are not repairable at the depot level.
3.5.6.2.9.3	All other hazards may be interlocked via software.
3.5.6.2.10	The precedence for conforming to safety requirements will be: 1. design for minimum risk, 2. incorporate safety devices, 3. provide warning devices, 4. develop procedures and training
3.5.6.2.11	The general safety requirements are: A. eliminate hazards through design, including material selection, B. isolate hazardous substances from people, C. minimize hazard to people during operation and maintenance from high voltage, electro-magnetic radiation, sharp edges, hot surfaces, chemicals, etc., D. minimize risks due to environmental conditions, such as temperature, noise, vibration, E. minimize risks created by human error, F. use interlocks and other protective devices when hazards cannot be eliminated, G. provide distinctive markings and warnings to protect people
3.5.9.1	The software must be strictly modular, i.e. the functionality of a subsystem should correspond to that which belongs to that subsystem and only to that, so that software for different subsystems can be installed and maintained independently of all the rest.
3.5.9.2	At the same time, the possibility must exist to acquire information about other parts of the system (for example, telescope coordinates) (as mentioned in the control flow requirements in Section 3.1.1).
3.5.9.3	It also important that there are no undesired interactions between subsystems. This may be enforced either at the client/server interface or at the message system level.
3.5.10.1	Fault tolerance. The security and safety of the system should be guaranteed even in the event of failure of any component, including the higher -level software.
3.8.1	Test procedure methods have to be defined in the Software Test Plan (STP), while test plans shall be written for all individual software packages and modules comprising the Gemini 8m Telescopes software.
4.1.2.1	A measure of fault rates should be done during commissioning to establish baseline rates for system reliability monitoring.
4.1.2.2	During science planning, there should be validity and feasibility checks to help ensure effective and efficient use of the telescope.  Where appropriate, these checks should also be performed during operation.
4.1.2.3	The system should be constantly monitoring active subsystems to be sure they are operating correctly before sending commands to each subsystem.  This monitoring should continue on inactive subsystems.
4.2.1.1	All telescope, instrument, and detector control information is to be available at any operation level.
4.2.1.2	Access times to the database are to be in the range of 2-3 msec per access.
4.2.1.3	Asynchronous writes are to be supported, allowing for concurrent operation.
4.2.1.4	Time-access critical information is available in memory.
4.2.1.5	There is to be a consistent and logical (i.e. name based) access method.
4.2.1.6	The database must support both remote access and distributed data.
4.2.2.1	There must be some form of security to control access to system features, possibly restricting some operations to specific remote sites (e.g. Hale Pohaku or Hilo in Hawaii, Cerro Tololo in Chile, etc.)
4.2.4.1.1	Automatic operation.   This is the normal mode of operation.  The observation is performed through a preplanned program requiring little or no interaction with the observer.
4.2.4.1.2	Interactive operation.   Science planning and program changes are accomplished through interactive operation. It is possible to enter interactive operation from automatic operation to handle exceptional conditions. This is the normal mode of operation at maintenance and test levels.
4.2.4.1.3	Modes and control.  Normal operation is possible at all operation levels (observing, maintenance, and test) and applies to the following conditions (where appropriate) on any subsystem: 1. Observing, 2. Stand-by, 3. Maintenance and testing
4.2.4.1.4	Performance.  Overall performance of the Gemini telescope is defined as the percentage of viewable time during which exposures have been taken (i.e. sum of all exposure times over available time for exposures). To improve this performance, all possible concurrencies in system operation should be used. Best use of concurrency occurs when using the Sequencer.
4.2.4.1.5	Start-up and shut-down.  There are start-up and shut-down procedures that must exist at many different levels:
4.2.4.1.6	Cold start-up, starting the system from scratch (including time to download all software) should take about 5 minutes.  This does not include time to start-up the telescope or instruments.
4.2.4.1.7	Warm start-up, starting from scratch but also excluding software download time should take about 1 minute.
4.2.4.1.8	Telescope start-up, measured from end of cold or warm start-up should be about 4 minutes.
4.2.4.1.9	Instrument start-up, measured from end of telescope start-up, should take 2 minutes or less.
4.2.4.1.10	There must be a way to shut down all subsystems (hardware and software).
4.2.4.1.11	All start-ups and shut-downs are to be automatically logged with time stamps, to allow for statistics on system availability.
4.2.4.1.12	System logging information should include all important events, properly time-stamped and indexed.  The goal is to be able to recreate the steps in a observation from the system logs.
4.2.4.1.13	It must be possible to log engineering data at up to 200 Hz rates for short periods of time. This data must be available to external software packages for analysis.
4.2.4.1.14	Long-term logging of engineering data must be possible at slower (1 Hz or less) rates, into a common format (baselined as SYBASE).
4.2.4.2.1	All errors should be reported using a common, system-wide procedure.
4.2.4.2.2	All subsystems must group errors into these categories.  In addition, errors that result in an "alarm" should be described, along with the proper action required to acknowledge and eliminate the alarm condition.
4.2.4.2.3	Besides the time-stamp, error logging should provide enough information to trace the condition back to its apparent source, both in equipment and in event sequence.
4.2.4.2.4	There should be tools available to extract error (and other) logging information by subsystem component, time- sequence, previous events, and so on.
4.2.4.2.5	Recovery.  In addition to start-up procedures, there must be well-defined recovery procedures for any subsystem that has become inoperative.
4.2.4.2.5.1	Command retries must be included in the system for most common timeouts or no-response conditions.  These retries should occur automatically in the command handling to avoid unnecessary error conditions.
4.2.4.2.6	Under normal conditions, the number of warnings should be small.  The system should monitor the rate of warning messages since an increase might indicate that some tuning or maintenance is appropriate.   Ideally, such conditions should be noted by the subsystems before reaching the OCS level.
4.2.4.2.7	Failure conditions should not cascade.  That is, failure of one subsystem should not affect other, working, subsystems, including communication links.
4.2.5.1.1.1	All Gemini supported software is to be developed using a formally defined model.  The Ward/Mellor approach to developing real-time systems is used and covers: A. Analysis, design and development methods; B. Review procedures; C. Documentation; D. Coding and debugging; E. Simulation; F. Testing and integration;
4.2.5.1.2.1	The development operating system is UNIX System V, Release 4 , using only POSIX compliant calls to the operating system.  In particular, vendor specific extensions are not permitted. Compliance to POSIX is measured against the book: POSIX Programmer 's Guide - Writing Portable UNIX Programs, by Donald Lewine, O'Reilly & Associates, Inc. 1991.
4.2.5.2.1	Workstations must match specified software standards and present a well-designed development environment, including cross-support for VxWorks development, if needed.
4.2.5.2.2	Workstations are expected to be state-of-the-art systems (CPU, communications support) in a scalable family.  This allows the migration of development systems to advancing technology.
4.2.5.2.3	It is assumed that workstations support Ethernet IEEE-802.3 and FDDI interfaces for communications.
4.2.5.2.4	Internal data formats must be compatible across workstations used for development.
4.2.5.2.5	SCSI-interface peripherals are to be available.
4.2.5.2.6	Reliability, manufacturer support, and upgrade capability of the development systems will be considered when selecting the final target systems.
4.2.5.4.1	All communication hardware must meet the data flow requirements and software protocols defined in this document.
4.2.5.4.2	Interlock connections must be provided for all critical subsystems. The software interface to the interlock system is defined in the Instrument Control System Infrastructure Work Package Definition.