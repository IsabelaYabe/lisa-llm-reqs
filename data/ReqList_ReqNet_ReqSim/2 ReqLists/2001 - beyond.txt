5.1.1	The authoring tool should allow easy modification of the behaviour of user interfaces.
5.1.2	The authoring tool should support easy development of adaptive user interfaces.
5.1.3	The authoring tool should allow the functional requirements specification of the next generation of consumer products to be developed in a much faster and efficient manner.
6.1.2.1	The software structure of the firmware should be suitable for adding a ‘UI-interpreter’ (to interpret and visualize the UI code generated by the UI Editor; so a very important component in this project). For this aspect we have chosen to add/implement a kind of virtual machine which performs the interaction between the UI-Code and the effective hardware/firmware. For performance reasons this VM is closely matched with the firmware.
6.1.2.2	The software (firmware) should be able to control all the available hardware and the hardware state should be accessible to the firmware and be exposed to the UI-Code.
6.1.2.3	The software architecture of the firmware should allow the extension with additional functionality.
6.1.2.4	The UI Editor should allow flexible creation and modification of the user interface of the Vetronics application. This must be done in an interactive and visual way.
6.1.2.5	The UI Editor should be ab le to communicate with the Vetronics hardware, to download the developed UI to the Vetronics system for real use. This communication is done using different kinds of interfacing (Serial port, USB, FireWire, IrDa, CAN, …). This communication module is also needed to obtain the system configuration from the Vector Unit.
6.1.2.6	The UI Editor should not only allow the management of the UI  of the Vetronics application, but should also support definition of the behavior of the Vetronics system through the connection of real actions to UI elements.
6.1.2.7	The UI Editor itself should be a powerful and user friendly tool. Because we are focussing of Windows-users, the Windows guidelines are taken info account. However, we do not want to obtain the “Designed for Windows ….” Label. It should be compatible with the common versions of Windows (98/ME/2000) and near-future versions.
6.1.2.8	The UI-Editor should be an open-application so we can add new functionality to support new hardware configurations. To obtain this we must create an open framework on which we can Plug-In all functionality we desire.
6.4.1.1	The software structure of the firmware should be suitable for adding a ‘UI-interpreter’ (to interpret and visualize the UI code generated by the UI Editor).  This UI-Interpreter has now a more concrete form by means of the dedicated Virtual Machine.
6.4.1.2	The UI interpreter (=VM) should show a “start menu” (defined in the UI by the UI Editor) when the system is powered up. This start menu is the root item for the complete UI-menu tree.
6.4.1.3	The UI interpreter should interpret the downloaded UI code to navigate through the menus and perform defined actions. Because of the event driven firmware, the UI is built on Event-Action associations
6.4.1.4	The UI interpreter should control the interference between the defined UI and the environmental conditions, such as overruling user-defined UI elements and actions by an “emergency” UI and behavior. This is the decision-agent we need for content prioritization.
6.4.1.5	The UI Editor should allow the user to create/modify menus. Menus are in fact the combination of Overlay (OSD and Symbol Generator), HotSpot zones and Event-Action Associations.
6.4.1.6	The UI Editor should enable the user to associate an event to an action as defined in the previous point. An event-driven approach is envisioned in the first prototype to evaluate its feasibility. Hereby the VM must support this event-driven approach and act as a transparent link between the generated UI-code and the hardware.
6.4.1.7	The UI Editor should provide a compile step to generate code on the development platform. The Editor also allows downloading the generated code in the embedded Vetronics system (where it will be interpreted by the firmware). This is the way the OffLine adaptivity of the Vetronics system is based on.
6.4.1.8	In general, the UI Editor should be a us er friendly and powerful development tool. This requires: • Attention for visualization and simulation issues (WYSIWYG approach, e.g. Visualization of the designed UI, menus, icons, Simulating navigation etc.). The Windows guidelines should be followed. • Attention for solutions that speed up the development of the UI (e.g. investigate the use of drag-and-drop tools such as in the context of action definition). • Attention for general usability issues and user interface design.